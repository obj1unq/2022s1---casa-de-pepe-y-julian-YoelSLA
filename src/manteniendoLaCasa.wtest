import casa.*

describe "manteniendoLaCasa" {

	method initialize() {
		casaDePepeYJulian.estrategiaDeAhorro(minimoEIndispensable)
		casaDePepeYJulian.cuenta(cuentaCorriente)
	}

	test "01- Cuando la casa no tiene suficientes viveres (40%), usan la estrategia indispensable donde comprar viveres con una
				calidad de 2 para que alcance." {
		// SetUp
		casaDePepeYJulian.porcentajeViveres(10)
		minimoEIndispensable.calidad(2)
		// Exercise
		casaDePepeYJulian.comprarViveres()
		// Asssert
		assert.that(casaDePepeYJulian.tieneViveresSuficientes())
	}

	test "02 - Cuando la casa está en orden, usan la estrategia full, y la misma tiene el 100% de los víveres." {
		// SetUp
		casaDePepeYJulian.estrategiaDeAhorro(full)
		casaDePepeYJulian.montoReparaciones(0)
		// Exercise
		casaDePepeYJulian.comprarViveres()
		// Assert
		assert.that(casaDePepeYJulian.estaEnOrden())
		assert.equals(100, casaDePepeYJulian.porcentajeViveres())
	}

	test "03 - Cuando la casa no está en orden, usan la estrategia full, donde aumenta un 40% de los viveres con una calidad
				siempre de 5." {
		// SetUp
		casaDePepeYJulian.porcentajeViveres(10)
		casaDePepeYJulian.estrategiaDeAhorro(full)
		casaDePepeYJulian.romper(500)
		// Exercise
		casaDePepeYJulian.comprarViveres()
		// Assert
		assert.notThat(casaDePepeYJulian.estaEnOrden())
		assert.equals(50, casaDePepeYJulian.porcentajeViveres())
	}

	test "04 - Cuando se le hace un matemiento a la casa, y no alcanza para hacer las reparaciones a la misma." {
		// SetUp
		casaDePepeYJulian.porcentajeViveres(50)
		casaDePepeYJulian.montoReparaciones(100)
		cuentaCorriente.depositar(1000)
		casaDePepeYJulian.estrategiaDeAhorro(full)
		// Exercise
		casaDePepeYJulian.mantener()
		// Assert
		assert.equals(90, casaDePepeYJulian.porcentajeViveres())
		assert.equals(800, cuentaCorriente.saldo())
		assert.equals(100, casaDePepeYJulian.montoReparaciones())
	}

	test "05 - Cuando se le hace un matemiento a la casa, y alcanza para hacer las reparaciones a la misma 
				y sobra saldo en la cuenta." {
		// SetUp
		casaDePepeYJulian.porcentajeViveres(50)
		casaDePepeYJulian.montoReparaciones(500)
		cuentaCorriente.depositar(2000)
		casaDePepeYJulian.estrategiaDeAhorro(full)
		// Exercise
		casaDePepeYJulian.mantener()
		// Assert
		assert.equals(90, casaDePepeYJulian.porcentajeViveres())
		assert.equals(1300, cuentaCorriente.saldo())
		assert.equals(0, casaDePepeYJulian.montoReparaciones())
	}

}

